(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * Based on the RFC 4648 base32 alphabet for hashIds.base32Lookup
 * https://en.wikipedia.org/wiki/Base32
 *
 * But I removed the l and added the 9 for more human readability
 */

let config = {
    hashIds: {
        createAtOnce: 1000000,
        regExp: /^[a-km-z2-79]+$/,
        base32Lookup: 'abcdefghijkmnopqrstuvwxyz2345679'
    },
    customAlias: {
        maxSize: 20,
        regExp: /^[a-z0-9-]+$/
    },
    urlMaxSize: 2000
};

module.exports = config;
},{}],2:[function(require,module,exports){
'use strict';

let parser = require('./urlParserCommon').parse;

module.exports.parse = (url, expectFailure) => {
    let result = false;

    if (expectFailure === undefined) {
        expectFailure = false;
    }

    try {
        result = parser(url);
    }
    catch(e) {
        if (!expectFailure) {
            console.error(e);
        }
        result = false;
    }

    return result;
};

},{"./urlParserCommon":3}],3:[function(require,module,exports){
(function (process){
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[5,7],$V2=[5,7,9],$V3=[5,7,9,14],$V4=[2,14],$V5=[1,17],$V6=[1,19],$V7=[1,23],$V8=[1,28],$V9=[1,31],$Va=[1,32];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"input":3,"EMAIL":4,"EOF":5,"url":6,"HASHEND":7,"baseurlWithPath":8,"?":9,"querystring":10,"KEYVALUEPAIR":11,"&":12,"baseurl":13,"URLPATH":14,"hostname":15,"HTTP":16,"loginpassword":17,"port":18,":":19,"NUMBER":20,"IDENTIFIER":21,"-":22,".":23,"password":24,"@":25,"PASSWORD_SPECIAL":26,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EMAIL",5:"EOF",7:"HASHEND",9:"?",11:"KEYVALUEPAIR",12:"&",14:"URLPATH",16:"HTTP",19:":",20:"NUMBER",21:"IDENTIFIER",22:"-",23:".",25:"@",26:"PASSWORD_SPECIAL"},
productions_: [0,[3,2],[3,3],[3,2],[6,1],[6,3],[10,1],[10,3],[8,1],[8,2],[13,1],[13,2],[13,3],[18,2],[15,1],[15,3],[15,2],[15,3],[17,4],[24,1],[24,1],[24,2],[24,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 13:

        if (($$[$0] < 0) || ($$[$0] > 65536)) throw 'port out of bounds'; 
break;
}
},
table: [{3:1,4:[1,2],6:3,8:4,13:5,15:6,16:[1,7],21:$V0},{1:[3]},{5:[1,9]},{5:[1,11],7:[1,10]},o($V1,[2,4],{9:[1,12]}),o($V2,[2,8],{14:[1,13]}),o($V3,[2,10]),{15:14,17:15,21:[1,16]},o($V3,$V4,{18:18,19:[1,20],22:$V5,23:$V6}),{1:[2,1]},{5:[1,21]},{1:[2,3]},{10:22,11:$V7},o($V2,[2,9]),o($V3,[2,11]),{15:24,21:$V0},o($V3,$V4,{18:18,19:[1,25],22:$V5,23:$V6}),{15:26,21:$V0},o($V3,[2,16]),{15:27,21:$V0},{20:$V8},{1:[2,2]},o($V1,[2,5]),o($V1,[2,6],{12:[1,29]}),o($V3,[2,12]),{20:$V8,21:$V9,24:30,26:$Va},o($V3,[2,15]),o($V3,[2,17]),o($V3,[2,13]),{10:33,11:$V7},{25:[1,34]},{21:$V9,24:35,25:[2,19],26:$Va},{21:$V9,24:36,25:[2,20],26:$Va},o($V1,[2,7]),{21:[2,18]},{25:[2,21]},{25:[2,22]}],
defaultActions: {9:[2,1],11:[2,3],21:[2,2],34:[2,18],35:[2,21],36:[2,22]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'WHITESPACE';
break;
case 1:return 16;
break;
case 2:return 4;
break;
case 3:return 5;
break;
case 4:return 7; /* Might need to investigate to make it more roboust */
break;
case 5:return 14;
break;
case 6:return 11;
break;
case 7:return 22;
break;
case 8:return 23;
break;
case 9:return 19;
break;
case 10:return 25;
break;
case 11:return '/';
break;
case 12:return 9;
break;
case 13:return 12;
break;
case 14:return '=';
break;
case 15:return '_';
break;
case 16:return '+';
break;
case 17:return 20;
break;
case 18:return 21;
break;
case 19:return 26;
break;
}
},
rules: [/^(?:\s+)/,/^(?:^((H|h)(T|t)(T|t)(P|p)(S|s)?:\/\/))/,/^(?:^([M|m][A|a][I|i][L|l][T|t][O|o]:(\/\/)?(([0-9]|[a-z]|[A-Z])+((_|-|\.)*([0-9]|[a-z]|[A-Z])+)*)+@(([0-9]|[a-z]|[A-Z])+((-)*([0-9]|[a-z]|[A-Z])+)*)(\.(([0-9]|[a-z]|[A-Z])+((-)*([0-9]|[a-z]|[A-Z])+)*))*))/,/^(?:$)/,/^(?:(#[^ ]+))/,/^(?:(\/(([0-9]|[a-z]|[A-Z]|\+|_|-|'|\.|\(|\)|%20)+\/?)*))/,/^(?:([0-9]|[a-z]|[A-Z]|_)+=([0-9]|[a-z]|[A-Z]|_|\+|%20|-|\.)+)/,/^(?:-)/,/^(?:\.)/,/^(?::)/,/^(?:@)/,/^(?:\/)/,/^(?:\?)/,/^(?:&)/,/^(?:=)/,/^(?:_\b)/,/^(?:\+)/,/^(?:([0-9])+)/,/^(?:([0-9]|[a-z]|[A-Z])+)/,/^(?:(%20|%21|%23|%24|%26|%27|%28|%29|%2A|%2B|%2C|%2F|%3A|%3B|%3D|%3F|%40|%5B|%5D)+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this,require("pBGvAp"))
},{"fs":4,"pBGvAp":6,"path":5}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require("pBGvAp"))
},{"pBGvAp":6}],6:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],7:[function(require,module,exports){
'use strict';

function muAboutComponent() {
}

/**
 * Initializes the component
 *
 * @param app
 * @constructor
 */
module.exports.Init = function(app) {
    app.component('muAbout', {
        template: require('./muAbout.tpl.html'),
        transclude: true,
        controller: muAboutComponent
    });
}
},{"./muAbout.tpl.html":8}],8:[function(require,module,exports){
module.exports = "<h3>About Page</h3>";

},{}],9:[function(require,module,exports){
'use strict';

/**
 * Initializes the component
 *
 * @param app
 * @constructor
 */
module.exports.Init = function(app) {
    app.component('muAppFrame', {
        template: require('./muAppFrame.tpl.html'),
        transclude: true,
        controller: function() {}
    });
}
},{"./muAppFrame.tpl.html":10}],10:[function(require,module,exports){
module.exports = "<nav class=\"navbar navbar-inverse\" role=\"navigation\">\n    <div class=\"navbar-header\">\n        <button type=\"button\" class=\"navbar-toggle\" ng-click=\"isNavCollapsed = !isNavCollapsed\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n        </button>\n        <a class=\"navbar-brand\" href=\"/\">MiniURL</a>\n    </div>\n    <div class=\"collapse navbar-collapse\" uib-collapse=\"!isNavCollapsed\">\n        <ul class=\"nav navbar-nav\">\n            <li><a href=\"/create\">Create</a></li>\n            <li><a href=\"/about\">About</a></li>\n        </ul>\n    </div>\n</nav>\n<div ng-transclude></div>\n";

},{}],11:[function(require,module,exports){
'use strict';
var urlParser = require('../../../lib/urlParser/urlParser');
var defaults = require('../../../global/globals');

/**
 * Handles the MiniURL create page
 *
 * @param ShrinkUrlService
 * @param $state
 */
function muCreateComponent(ShrinkUrlService, $state) {

    this.url = '';
    this.customAlias = '';
    this.alert = null;
    this.host = window.location.host;
    this.urlMaxSize = defaults.urlMaxSize;
    this.aliasMaxSize = defaults.customAlias.maxSize;
    ShrinkUrlService.clear();

    /**
     * Verifies if a URL is valid
     *
     * @returns {boolean}
     */
    this.verifyUrlIsValid = function () {
        var result = false;
        this.url = this.url.trim();
        if (urlParser.parse(this.url, true)) {
            var urlLower = this.url.toLowerCase();
            if (!urlLower.startsWith('http://') && !urlLower.startsWith('https://') && !urlLower.startsWith('mailto:')) {
                this.url = 'http://' + this.url;
            }

            if (this.url.length < defaults.urlMaxSize) {
                result = true;
            } else {
                this.alert = {
                    type: 'danger',
                    msg: 'URL is too long, make sure the URL is less than ' + defaults.urlMaxSize +
                         ' charactes long, including http(s)://'
                };
            }
        } else {
            this.alert = { type: 'danger', msg: 'Invalid URL!' };
        }

        return result;
    };

    /**
     * Verifies if the custom alias is valid
     * @returns {boolean}
     */
    this.verifyCustomAliastIsValid = function() {
        var result = false;
        this.customAlias = this.customAlias.trim();

        if (this.customAlias.length == 0) {
            result = true;
        } else if ((this.customAlias.indexOf(' ') < 0) && defaults.customAlias.regExp.test(this.customAlias)) {
            if (this.customAlias[0] != '-' && this.customAlias[this.customAlias.length -1] != '-') {
                result = true
            }
        }

        if (!result) {
            this.alert = { type: 'danger', msg: 'Invalid alias! Make sure the alias does not conain spaces or has any dashes (-) at the beginning or end.' };
        }

        return result;
    };

    /**
     * Submits a URL to be shrinked
     */
    this.submitUrl = function() {
        if (this.verifyUrlIsValid() && this.verifyCustomAliastIsValid()) {
            ShrinkUrlService.shrink(this.url, this.customAlias).then(
                function () {
                    $state.go('Created');
                },
                function (error) {
                    switch (error.status) {
                        case 500:
                            this.alert = {type: 'danger', msg: 'Failed to shrink the URL.'};
                            break;
                        case 409:
                            this.alert = {type: 'danger', msg: error.data.message};
                            break;
                        case 503:
                            this.alert = {type: 'danger', msg: 'MiniUrl service is not available. Try again at a later time. '};
                            break;
                        default:
                            this.alert = {type: 'danger', msg: 'Unexpected Error'};
                    }
                }.bind(this)
            );
        }
    };

    /**
     * Closes an alert being displayed
     */
    this.closeAlert = function () {
        this.alert = null;
    };
}

muCreateComponent.$inject = [ 'ShrinkUrlService', '$state' ];

/**
 * Initializes the component
 *
 * @param app
 * @constructor
 */
module.exports.Init = function(app) {
    app.component('muCreate', {
        template: require('./muCreate.tpl.html'),
        controller: muCreateComponent
    });
}
},{"../../../global/globals":1,"../../../lib/urlParser/urlParser":2,"./muCreate.tpl.html":12}],12:[function(require,module,exports){
module.exports = "<div class=\"container\">\n    <h3>Welcome to MiniURL!</h3>\n    <p>This site helps you create a mini URL out of a standard URL. For more information about this site and the\n        technologies used to create it see the <a href=\"/about\">About</a> page</p>\n    <hr>\n    <row>\n        <div class=\"col-sm-6\">\n            <row>\n                <div class=\"form-group\">\n                    <label for=\"urlString\">Enter a long URL:</label>\n                    <input type=\"text\" class=\"form-control\" id=\"urlString\" ng-model=\"$ctrl.url\" maxlength=\"$ctrl.urlMaxSize\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"customAlias\" class=\"control-label\">Custom alias (optional):</label>\n                    <input type=\"text\" class=\"form-control\" id=\"customAlias\" ng-model=\"$ctrl.customAlias\"\n                           maxlength=\"$ctrl.aliasMaxSize\" placeholder=\"\">\n                    <p class=\"help-block\">May contain letters, numbers, and dashes, but not begin or end with dashes.\n                        the custom URL will look like: </p>\n                    <p class=\"help-block\">http://{{ $ctrl.host }}/{{ $ctrl.customAlias }}</p>\n                </div>\n            </row>\n            <div class=\"form-group\">\n                <button class=\"btn btn-primary\" ng-disabled=\"!$ctrl.url\" ng-click=\"$ctrl.submitUrl()\">Shrink</button>\n            </div>\n        </div>\n        <div class=\"col-sm-12\">\n            <div class=\"form-group\">\n                <div uib-alert ng-if=\"$ctrl.alert\" ng-class=\"'alert-' + ($ctrl.alert.type || 'warning')\" close=\"$ctrl.closeAlert()\">{{$ctrl.alert.msg}}</div>\n            </div>\n        </div>\n    </row>\n</div>\n";

},{}],13:[function(require,module,exports){
'use strict';

function muCreatedComponent(ShrinkUrlService, $state) {
    if(ShrinkUrlService.shrinkResult) {
        this.miniUrl = 'http://' + window.location.host + '/' + ShrinkUrlService.shrinkResult.alias;
        this.url = ShrinkUrlService.shrinkResult.url;
    } else {
        $state.go('Create');
    }

    //this.shrinkedUrlLength = ShrinkUrlService.shrinkResult;

}

muCreatedComponent.$inject = [ 'ShrinkUrlService', '$state' ];

/**
 * Initializes the component
 *
 * @param app
 * @constructor
 */
module.exports.Init = function(app) {
    app.component('muCreated', {
        template: require('./muCreated.tpl.html'),
        controller: muCreatedComponent
    });
}
},{"./muCreated.tpl.html":14}],14:[function(require,module,exports){
module.exports = "<div class=\"container\">\n    <h3>MiniURL created successfully!</h3>\n    <p>You can use share this url with anyone. When they click on the MiniUrl they will be redirected to the original\n    URL you provided.</p>\n    <br>\n    <p>The <strong>MiniURL</strong> is {{ ::$ctrl.miniUrl.length }} characters long while the <strong>original URL</strong> is {{ ::$ctrl.url.length }} characters long</p>\n    <p><strong>MiniURL generated:</strong> {{ ::$ctrl.miniUrl }}</p>\n    <p><a href=\"{{ ::$ctrl.miniUrl }}\" target=\"_blank\">Open in new window or tab</a></p>\n    <p class=\"wrap-words\"><strong>Original URL:</strong> {{ ::$ctrl.url }}</p>\n    <hr>\n    <a class=\"btn btn-primary\" href=\"/\">Create another MiniURL</a>\n</div>\n";

},{}],15:[function(require,module,exports){
'use strict';

/**
 * Initializes the component fot he not found page
 *
 * @param app
 * @constructor
 */
module.exports.Init = function(app) {
    app.component('muNotFound', {
        template: require('./muNotFound.tpl.html'),
        transclude: true,
        controller: function () {}
    });
}
},{"./muNotFound.tpl.html":16}],16:[function(require,module,exports){
module.exports = "<div class=\"container\">\n    <h3>Error: Unable to find the URL to redirect to!</h3>\n    <p>Please check that the URL entered is correct.</p>\n</div>";

},{}],17:[function(require,module,exports){
'use strict';
var routes = require('./routes');
var muAppFrame = require('./components/muAppFrame/muAppFrame.component');
var muCreate = require('./components/muCreate/muCreate.component');
var muCreated = require('./components/muCreated/muCreated.component');
var muAbout = require('./components/muAbout/muAbout.component');
var muNotFound = require('./components/muNotFound/muNotFound.component');
var shrinkUrlService = require('./services/ShrinkUrlService');
var responseErrorInterceptor = require('./interceptors/responseError');

var muApp = angular.module('shrinkUrl', [ 'ui.router', 'ui.bootstrap' ] );

/**
 * Initializing routes
 */
routes.Init(muApp);

/**
 * Initializing services
 */
shrinkUrlService.Init(muApp);

/**
 * Initializing interceptors
 */
responseErrorInterceptor.Init(muApp);

/**
 * Initializing components
 */
muAppFrame.Init(muApp);
muCreate.Init(muApp);
muCreated.Init(muApp);
muAbout.Init(muApp);
muNotFound.Init(muApp);


},{"./components/muAbout/muAbout.component":7,"./components/muAppFrame/muAppFrame.component":9,"./components/muCreate/muCreate.component":11,"./components/muCreated/muCreated.component":13,"./components/muNotFound/muNotFound.component":15,"./interceptors/responseError":18,"./routes":19,"./services/ShrinkUrlService":20}],18:[function(require,module,exports){
'use strict';

/**
 * This interceptor captures the error generated when the page is running but the server is down and transforms it into
 * a 503 HTTP ERROR (Service unavailable).
 *
 * @param $httpProvider
 */
function configResponseError($httpProvider) {
    $httpProvider.interceptors.push(['$q', function($q) {
        return {
            responseError: function(rejection) {
                if(rejection.status == -1) {
                    return $q.reject({ status: 503 });
                }
                return $q.reject(rejection);
            }
        };
    }]);
}

configResponseError.$inject = [ '$httpProvider' ];

/**
 * Export function to initialize the Response Error Interceptor
 *
 * @param app
 */
module.exports.Init = function(app) {
    app.config(configResponseError);
};

},{}],19:[function(require,module,exports){
'use strict';

/**
 * Configures the routes for the angular ui router
 *
 * @param $stateProvider
 * @param $urlRouterProvider
 * @param $locationProvider
 */
function configRoutes($stateProvider, $urlRouterProvider, $locationProvider) {
    $locationProvider.html5Mode(true);
    $urlRouterProvider.otherwise('/');

    /**
     * Map containing the application routes
     */
    var states = [
        { name: 'Create',   url: '/',         component: 'muCreate'   },
        { name: 'Created',  url: '/created',  component: 'muCreated'  },
        { name: 'About',    url: '/about',    component: 'muAbout'    },
        { name: 'NotFound', url: '/notfound', component: 'muNotFound' }
    ];

    /**
     * Registering the routes with the state provider so that the router can use them.
     */
    for (var index = 0 ; index < states.length ; index++) {
        $stateProvider.state(states[index]);
    }
}

configRoutes.$inject = [ '$stateProvider', '$urlRouterProvider', '$locationProvider' ];

/**
 * Export function to initialize the router
 *
 * @param app
 */
module.exports.Init = function(app) {
    app.config(configRoutes);
};

},{}],20:[function(require,module,exports){
'use strict';

/**
 * NOTE: Since the API is only one I am not using any REST helper module like ngResouce to save some space.
 *
 * Used to shrink a url
 *
 * @param $http
 * @constructor
 */
function ShrinkUrlService($http) {
    this.shrinkResult = null;

    /**
     * Clears the shrinkResult member variable so that any hard refresh on the results page is redirected to the create
     * page instead.
     */
    this.clear = function () {
        this.shrinkResult = null;
    };

    /**
     * POSTs a call to the shrink API with the url and alias information
     *
     * @param url
     * @param alias
     * @returns {*|Promise.<TResult>}
     */
    this.shrink = function (url, alias) {
        return $http.post('/api/v1/shrink', {
            url: url,
            alias: alias
        }).then(
            function (result) {
                this.shrinkResult = result.data;
                this.shrinkResult.url = url;
                return this.shrinkResult;
            }.bind(this)
        );
    };
}

ShrinkUrlService.$inject = [ '$http' ];

/**
 * Initializes the ShrinkUrlService used to shrink a url.
 * @param app
 * @constructor
 */
module.exports.Init = function(app) {
    app.service('ShrinkUrlService', ShrinkUrlService);
};
},{}]},{},[17])